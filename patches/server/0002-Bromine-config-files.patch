From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mediang <104988785+Mediang@users.noreply.github.com>
Date: Thu, 5 May 2022 18:24:35 +0000
Subject: [PATCH] Bromine config files


diff --git a/src/main/java/io/github/mediang/bromine/BromineConfig.java b/src/main/java/io/github/mediang/bromine/BromineConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..fe0bb82fe9636737c6e74a22d973f0a04282863c
--- /dev/null
+++ b/src/main/java/io/github/mediang/bromine/BromineConfig.java
@@ -0,0 +1,93 @@
+package io.github.mediang.bromine;
+
+import com.google.common.base.Throwables;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.logging.Level;
+
+public class BromineConfig {
+
+    public static final String HEADER = "This is the main configuration file for Bromine.";
+
+    public static YamlConfiguration config;
+    public static File configFile;
+
+    public static int currentVersion = 1;
+    public static int version;
+
+    public static void init(File configFile) {
+        BromineConfig.configFile = configFile;
+
+        config = new YamlConfiguration();
+        try {
+            config.load(configFile);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load " + configFile.getName() + ", please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+
+        version = config.getInt("version", currentVersion);
+        set("version", currentVersion);
+
+        readConfig(BromineConfig.class, null);
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (!Modifier.isPrivate(method.getModifiers())) continue;
+            if (method.getParameterTypes().length != 0) continue;
+            if (method.getReturnType() != Void.TYPE) continue;
+
+            try {
+                method.setAccessible(true);
+                method.invoke(instance);
+            } catch (InvocationTargetException ex) {
+                throw Throwables.propagate(ex.getCause());
+            } catch (Exception ex) {
+                Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+            }
+        }
+
+        try {
+            config.save(configFile);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + configFile.getName(), ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 6afd7c8b3a0db90dbab14b4405ae4c750e5b0ef1..2483ac6ca859ac4db12c7f00610e92a3f6ecc514 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -231,6 +231,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         thread.start(); // Paper - start console thread after MinecraftServer.console & PaperConfig are initialized
         com.destroystokyo.paper.PaperConfig.registerCommands();
+        // Bromine start
+        try {
+            io.github.mediang.bromine.BromineConfig.init((java.io.File) options.valueOf("bromine-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        // Bromine end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // load mappings for stacktrace deobf and etc.
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index fd535254e01e277b38caf0484ece519974d475b0..29825e4e7e379d8090aa2e22698c7d90ce56e41f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -956,6 +956,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
+        io.github.mediang.bromine.BromineConfig.init((File) console.options.valueOf("bromine-settings")); // Bromine
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -2706,6 +2707,14 @@ public final class CraftServer implements Server {
             return com.destroystokyo.paper.PaperConfig.config;
         }
 
+        // Bromine start
+        @Override
+        public YamlConfiguration getBromineConfig()
+        {
+            return io.github.mediang.bromine.BromineConfig.config;
+        }
+        // Bromine end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index fbe68bd4739d9a0e7d9bc4c3d5ba8ecfd2d13954..d5b25b30467cfc41b44510cf1d3380bf377aa8f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -153,6 +153,14 @@ public class Main {
                         .describedAs("Jar file");
                 // Paper end
 
+                // Bromine start
+                acceptsAll(asList("bromine", "bromine-settings"), "File for bromine settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("bromine.yml"))
+                        .describedAs("Yml file");
+                // Bromine end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
